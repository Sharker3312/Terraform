name: cicd workflow

on:
  # Triggers the workflow on push request event but only for the "main" branch
  workflow_dispatch:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

env:
  TF_PLUGIN_CACHE_DIR: $HOME/.terraform.d/plugin-cache
 
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  #BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}



jobs:
  plan:
    # The type of runner that the job will run on
    name: Terraform plan
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
       shell: bash


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Ensure cache directory exists
        run: mkdir -p $HOME/.terraform.d/plugin-cache

      # To speed up the workflow, we cache the .terraform directory and terrraform providers
      # To avoid redownloading the providers everytime the workflow runs
      - name: Cache Terraform 
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key:  ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}   # ← swap for option ② if no lock file
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{secrets.AWS_REGION}}
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      # Runs a set of terraform commands using the runners shell
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: |
          terraform fmt -recursive
          terraform validate
        continue-on-error: false

      - name: Terraform Plan
        run: terraform plan